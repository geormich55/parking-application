Εδώ παραθέτω τον κώδικα Python που έγραψα και θα τον επισυνάψω και ξεχωριστά όπως και ένα
αρχείο Excel με τους πίνακες που τελικά κατέληξα να χρησιμοποιήσω για τη λύση μου.

Όπως θα δείτε είναι απλός και απέριττος με απλές εντολές και λίγες βιβλιοθήκες.
Ήθελα να χρησιμοποιήσω pandas ή Numpy αλλά τελικά θεώρησα ότι αυτά είναι πιο χρήσιμα όταν έχεις
ένα έτοιμο dataset και θες να το σπάσεις σε κομμάτια και θες να εξάγεις από εκεί πίνακες.
Συνεπώς χρησιμοποίησα απλά δυσδιάστατους πίνακες που είναι ουσιαστικά λίστες με δυναμική 
δέσμευση μνήμης.

Έχω έναν ατέρμων βρόχο με while που τελειώνει όταν το επιλέξει ο χρήστης με την αντίστοιχη επιλογή.
Επίσης ένα while μέσα που ελέγχει μόνο την ημέρα και αν αλλάξει βγαίνει.
Είναι μέσα όσο η μέρα δεν αλλάζει..

Χρησιμοποίησα την συνάρτηση datetime από την οποία πήρα μόνο τη μέρα για τη σύγκριση στο βρόχο.
Επίσης όπως θα δείτε εξάγω στο τέλος με print την πινακίδα το κόστος και τη διάρκεια παραμονής σε 
λεπτά στο parking και για τους 3 τύπους οχημάτων(επιβατικό, φορτηγό ή λεωφορείο) μόνο όμως αυτά 
που μπαίνουν και βγαίνουν την ίδια μέρα γιατί εγώ αυτό κατάλαβα από την εκφώνηση ότι ζητείται.
Δηλαδή αν και ο αλγόριθμος όπως θα δείτε δουλεύει ακόμα και αν μπουν και βγουν οσεσδήποτε 
φορές οχήματα από το parking.(εκτυπώνονται αυτά που ζητούνται για το κάθε όχημα ξεχωριστά όπως
και ο τύπος του) και επίσης αφήνω την επιλογή μία μέρα να μπει μόνο ή να βγει μόνο ένα όχημα εγώ 
εκτυπώνω μόνο αυτά που ζητούνται για οχήματα που μπαίνουν και βγαίνουν την ίδια μέρα.
Επίσης μιας και αυτά με ενδιαφέρουν μόνο σε κάθε λούπα του μέσα while όπου είναι για κάθε ημέρα 
ξεχωριστά αδειάζονται όλοι οι πίνακες που χρησιμοποιώ μιας και δεν με ενδιαφέρει αν είχαν μπει 
προηγούμενες μέρες οχήματα και βγήκαν σήμερα ούτε αν μπήκαν σήμερα οχήματα και βγουν τις
επόμενες μέρες.

Οπότε καθημερινά γεμίζουν οι πίνακες με τα αμάξια που μπήκαν, με τα αμάξια που βγήκαν και με τα 
αμάξια που μπήκαν και βγήκαν και εγώ εξάγω πινακίδα, κόστος και διάρκεια παραμονής ανά επιβατικό
με τη σειρά, ανά φορτηγό με τη σειρά και ανά λεωφορείο με τη σειρά μόνο για αυτά τα οχήματα που 
μπήκαν και βγήκαν την ίδια μέρα.

Για το κόστος σαφώς χρησιμοποιήθηκε ο πίνακας που μας προτείνεται με τα κόστη.
Επίσης έχω στρογγυλοποιήσει τα δευτερόλεπτα στη διαμονή και υπολογίζω τον χρόνο διαμονής σε 
λεπτά.

Μιας και λεπτά έχει και ο πίνακας.
Βεβαίως αυτό λειτουργεί ανάλογα με τη διάρκεια που παίρνει από την βιβλιοθήκη datetime που 
μετατρέπω σε string οπότε θέλει κάποια ώρα για να μεγαλώσει το κόστος πάνω από 0.

Τέλος για το μέσα while-λούπα όπως είπα βλέπω μόνο τη μέρα από την datetime ενώ μέσα στην μέσα 
while-λούπα παίρνω μόνο την ώρα και βλέπω έτσι ποιο αμάξι μπήκε πρώτο ποιο δεύτερο κλπ και ποιο 
βγήκε αντίστοιχα πρώτο ποιο δεύτερο κλπ μιας και θα πρόκειται για την ίδια μέρα, μήνα, έτος οπότε 
αρκεί να συγκρίνω μόνο τις ώρες, τα λεπτά και τα δευτερόλεπτα για να υπολογίσω ώρα εξόδου - ώρα 
εισόδου ώστε να υπολογίσω και το κόστος.

Τέλος να πω ότι σε κανονικές συνθήκες θα τραβούσα από κάποιο API για κάθε αμάξι τις πινακίδες και 
το είδος με βάση αυτά που είπα στα ερωτήματα 1 και 2 ή θα χρησιμοποιούσα κάποια βιβλιοθήκη σαν 
αυτές που ανέφερα παραπάνω με κάποια scripts τα οποία θα τα καλούσα για κάθε αμάξι ώστε να έχω 
πινακίδα-αριθμός κυκλοφορίας, είδος αμαξιού-τύπος οχήματος, ώρα εισόδου και ώρα εξόδου.
Στο παράδειγμα που υλοποίησα όμως θεωρώ ότι τα εισάγει ο χρήστης με input που του ζητείται μιας 
και δεν κάλεσα κάποιο API πχ ώστε να πάρω αυτά τα δεδομένα για κάθε αμάξι και να τα 
χρησιμοποιήσω στον αλγόριθμό μου.

Έχω 7 πίνακες με 2 στήλες και I γραμμές για το κάθε είδος οχήματος επιβατικό, φορτηγό ή λεωφορείο.
Οπότε είναι 7*3=21 πίνακες συνολικά.

Car_plate_entry:στην πρώτη στήλη είναι ένας δείκτης με τη σειρά εισόδου του οχήματος, κοινός σε 
όλους τους πίνακες εισόδων ανά τύπο αμαξιού και στην δεύτερη στήλη η πινακίδα του

Car_date_entry: στην πρώτη στήλη είναι ένας δείκτης με τη σειρά εισόδου του οχήματος, κοινός σε 
όλους τους πίνακες εισόδων ανά τύπο αμαξιού και στην δεύτερη στήλη η ημερομηνία εισόδου του 
που τελικά όπως είπα κράτησα την ώρα εισόδου του αφού η λούπα μέσα while είναι ανά ημέρα για 
λόγους απλότητας

Car_plate_exit: στην πρώτη στήλη είναι ένας δείκτης με τη σειρά εξόδου του οχήματος, κοινός σε 
όλους τους πίνακες εξόδων ανά τύπο αμαξιού και στην δεύτερη στήλη η πινακίδα του

Cat_date_exit: στην πρώτη στήλη είναι ένας δείκτης με τη σειρά εξόδου του οχήματος, κοινός σε όλους 
τους πίνακες εξόδων ανά τύπο αμαξιού και στην δεύτερη στήλη η η ημερομηνία εξόδου του που 
τελικά όπως είπα κράτησα την ώρα εξόδου του αφού η λούπα μέσα while είναι ανά ημέρα για λόγους 
απλότητας

Car_duration: στην πρώτη στήλη είναι ένας δείκτης με τη σειρά εξόδου του οχήματος, κοινός σε όλους 
τους πίνακες εξόδων ανά τύπο αμαξιού και στην δεύτερη στήλη η διάρκεια παραμονής του κάθε 
οχήματος βγήκε από το parking μέσα στη μέρα σε λεπτά

Car_cost: στην πρώτη στήλη είναι ένας δείκτης με τη σειρά εξόδου του οχήματος, κοινός σε όλους τους
πίνακες εξόδων ανά τύπο αμαξιού και στην δεύτερη στήλη το κόστος παραμονής του κάθε οχήματος 
στο parking σε ευρώ

Car_plate_entry_exit: στην πρώτη στήλη είναι ένας δείκτης με τη σειρά εξόδου του οχήματος, κοινός 
σε όλους τους πίνακες εξόδων ανά τύπο αμαξιού και στην δεύτερη στήλη η πινακίδα του κάθε 
οχήματος που μπήκε και βγήκε την ίδια ημέρα στο parking που αυτά τα οχήματα τα στοιχεία τους
ψάχνουμε κιόλας

Τρέχω μια λούπα σε κάθε ημέρα και βλέπω αν η πινακίδα εξόδου είναι ίση με την πινακίδα εξόδου και 
η ημερομηνία εξόδου είναι μεγαλύτερη από την ημερομηνία εισόδου(σε περίπτωση που ένα αμάξι 
μπήκε και βγήκε πάνω από 1 φορές) τότε καταχωρώ σε έναν πίνακα τα αμάξια που μπήκαν και βγήκαν, 
τη διάρκεια παραμονής αφαιρώντας ώρα εξόδου-ώρα εισόδου για κάθε όχημα ξεχωριστά και το 
κόστος.
Τέλος αυτό το κάνω 3 φορές για τα 3 είδη οχήματος.

Τέλος να πω ότι χρησιμοποίησα Pycharm Editor 2020.2 για να τρέξω τον κώδικα και χρησιμοποίησα
αντίστοιχα κάποιον interpreter της Python.
Μιας και εδώ δεν φαίνεται καλά ο κώδικας και για σκοπούς run θα σας στείλω όπως είπα ξεχωριστά το 
Python αρχείο.
Στον κώδικά μου δεν χρησιμοποίησα ούτε κλάσεις ούτε αντικείμενα. Απλά και μόνο 
πίνακες(δυσδιάστατες λίστες) με δυναμική δέσμευση μνήμης.